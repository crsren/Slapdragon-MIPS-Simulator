# Example usage:
# If you have testbench/my_test.c, you can execute the following to create a MIPS binary
# make testbench/my_test.mips.bin

# For simulator
CC = g++ -std=c++11
CPPFLAGS = -W -Wall

MIPS_CC = mips-linux-gnu-gcc
MIPS_OBJCOPY = mips-linux-gnu-objcopy
MIPS_OBJDUMP = mips-linux-gnu-objdump
MIPS_CPPFLAGS = -W -Wall -O3 -fno-builtin -march=mips1 -mfp32
MIPS_LDFLAGS = -nostdlib -Wl,-melf32btsmip -march=mips1 -nostartfiles -mno-check-zero-division -Wl,--gpsize=0 -static -Wl,-Bstatic -Wl,--build-id=none

########################################################################
#not sure about this (Thomas')

%.mips.o: %.c
	$(MIPS_CC) $(MIPS_CPPFLAGS) -c $< -o $@

%.mips.o: %.s
	$(MIPS_CC) $(MIPS_CPPFLAGS) -c $< -o $@

%.mips.elf: %.mips.o
	$(MIPS_CC) $(MIPS_CPPFLAGS) $(MIPS_LDFLAGS) -T test/linker.ld $< -o $@

%.mips.bin: %.mips.elf
	$(MIPS_OBJCOPY) -O binary --only-section=.text $< $@

%.mips.s : %.mips.elf
	$(MIPS_OBJDUMP) -j .text -D $< > $@

build/%.o : src/%.cpp src/%.hpp
	mkdir -p build
	$(CC) $(CPPFLAGS) -c $< -o $@

#########################################################################

#link all .o files in /build
######### not sure if *.o will work in link command
simulator: build/!!.o  
	mkdir -p bin
	$(CC) $(CPPFLAGS) build/.o -o bin/mips_simulator

testbench: 
	mkdir -p bin
	cp -a src/testbench.sh bin/mips_testbench
	
clean:
	rm -rf ./bin/*
	rm -rf ./build/*
